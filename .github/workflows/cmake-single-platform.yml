# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on: push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  clang-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: clang-format lint
      uses: DoozyX/clang-format-lint-action@v0.16.2

    - name: 2.1 Create build database for clang-tidy
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - name: 2.2 Run clang-tidy check
      run: |
        echo "Files to be checked:"
        find cpp -name '*.cpp' -or -name '*.h'
        find cpp -name '*.cpp' -or -name '*.h' | xargs clang-tidy -p build --quiet 2>&1 | tee tidy_output.txt
    - name: 2.3 Check for clang-tidy warnings
      run: |
        if grep -E -q 'warning:' tidy_output.txt; then
          echo "Error: clang-tidy warnings found."
          grep -E -B1 'warning:' tidy_output.txt
          exit 1
        else
          echo "No new clang-tidy warnings found."
        fi
